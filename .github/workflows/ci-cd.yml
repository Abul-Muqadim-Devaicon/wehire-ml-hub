name: Deploy Backend Workflow
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  BACKEND_ECR_REPO: wehire-backend
  BACKEND_TASK_DEFINITION: wehire-task-def
  BACKEND_ECS_CLUSTER: wehire
  BACKEND_ECS_SERVICE: wehire-task-def

jobs:
  BackendDeployOnECS:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.BACKEND_ECR_REPO }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          echo "Building image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker build -f application/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "Pushed image to ECR: $REGISTRY/$REPOSITORY:$IMAGE_TAG"

      - name: Fetch and update ECS Task Definition
        id: register-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.BACKEND_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} \
          | jq '.taskDefinition 
          | del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities) 
          | .containerDefinitions[0].image = "'${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPO }}:${{ steps.vars.outputs.sha_short }}'"' \
          > task-definition.json
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
              
      - name: Update ECS Service
        run: |
          echo "Updating ECS service with new task definition..."
          aws ecs update-service \
            --cluster ${{ env.BACKEND_ECS_CLUSTER }} \
            --service ${{ env.BACKEND_ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN
          
          echo "Waiting for the service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.BACKEND_ECS_CLUSTER }} \
            --services ${{ env.BACKEND_ECS_SERVICE }}
      
          echo "Service has successfully stabilized."
        shell: bash